// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "todo-app/domain"
	client "todo-app/pkg/client"

	mock "github.com/stretchr/testify/mock"

	tokenprovider "todo-app/pkg/tokenprovider"

	uuid "github.com/google/uuid"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: id
func (_m *IUserService) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: paging
func (_m *IUserService) GetAll(paging *client.Paging) ([]domain.User, error) {
	ret := _m.Called(paging)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Paging) ([]domain.User, error)); ok {
		return rf(paging)
	}
	if rf, ok := ret.Get(0).(func(*client.Paging) []domain.User); ok {
		r0 = rf(paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Paging) error); ok {
		r1 = rf(paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *IUserService) GetById(id uuid.UUID) (*domain.User, error) {
	ret := _m.Called(id)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: data
func (_m *IUserService) Login(data *domain.UserLogin) (tokenprovider.Token, error) {
	ret := _m.Called(data)

	var r0 tokenprovider.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.UserLogin) (tokenprovider.Token, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*domain.UserLogin) tokenprovider.Token); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokenprovider.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.UserLogin) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: data
func (_m *IUserService) Register(data *domain.UserCreate) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UserCreate) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateById provides a mock function with given fields: id, user
func (_m *IUserService) UpdateById(id uuid.UUID, user *domain.UserUpdate) error {
	ret := _m.Called(id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *domain.UserUpdate) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
