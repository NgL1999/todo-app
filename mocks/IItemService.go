// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "todo-app/domain"
	client "todo-app/pkg/client"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IItemService is an autogenerated mock type for the IItemService type
type IItemService struct {
	mock.Mock
}

// Create provides a mock function with given fields: item
func (_m *IItemService) Create(item *domain.ItemCreation) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.ItemCreation) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: id, userID
func (_m *IItemService) DeleteById(id uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userID, paging
func (_m *IItemService) GetAll(userID uuid.UUID, paging *client.Paging) ([]domain.Item, error) {
	ret := _m.Called(userID, paging)

	var r0 []domain.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *client.Paging) ([]domain.Item, error)); ok {
		return rf(userID, paging)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, *client.Paging) []domain.Item); ok {
		r0 = rf(userID, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, *client.Paging) error); ok {
		r1 = rf(userID, paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id, userID
func (_m *IItemService) GetById(id uuid.UUID, userID uuid.UUID) (domain.Item, error) {
	ret := _m.Called(id, userID)

	var r0 domain.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (domain.Item, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) domain.Item); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Get(0).(domain.Item)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, userID, item
func (_m *IItemService) UpdateById(id uuid.UUID, userID uuid.UUID, item *domain.ItemUpdate) error {
	ret := _m.Called(id, userID, item)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, *domain.ItemUpdate) error); ok {
		r0 = rf(id, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIItemService creates a new instance of IItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IItemService {
	mock := &IItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
