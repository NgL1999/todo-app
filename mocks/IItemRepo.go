// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "todo-app/domain"
	client "todo-app/pkg/client"

	mock "github.com/stretchr/testify/mock"
)

// IItemRepo is an autogenerated mock type for the IItemRepo type
type IItemRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: filter
func (_m *IItemRepo) Delete(filter map[string]interface{}) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: filter
func (_m *IItemRepo) Get(filter map[string]interface{}) (domain.Item, error) {
	ret := _m.Called(filter)

	var r0 domain.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (domain.Item, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) domain.Item); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(domain.Item)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: filter, paging
func (_m *IItemRepo) GetAll(filter map[string]interface{}, paging *client.Paging) ([]domain.Item, error) {
	ret := _m.Called(filter, paging)

	var r0 []domain.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *client.Paging) ([]domain.Item, error)); ok {
		return rf(filter, paging)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *client.Paging) []domain.Item); ok {
		r0 = rf(filter, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, *client.Paging) error); ok {
		r1 = rf(filter, paging)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *IItemRepo) Save(_a0 *domain.ItemCreation) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.ItemCreation) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: filter, _a1
func (_m *IItemRepo) Update(filter map[string]interface{}, _a1 *domain.ItemUpdate) error {
	ret := _m.Called(filter, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, *domain.ItemUpdate) error); ok {
		r0 = rf(filter, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIItemRepo creates a new instance of IItemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIItemRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IItemRepo {
	mock := &IItemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
