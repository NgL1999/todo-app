// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	tokenprovider "todo-app/pkg/tokenprovider"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// Generate provides a mock function with given fields: data, expiry
func (_m *Provider) Generate(data tokenprovider.TokenPayload, expiry int) (tokenprovider.Token, error) {
	ret := _m.Called(data, expiry)

	var r0 tokenprovider.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(tokenprovider.TokenPayload, int) (tokenprovider.Token, error)); ok {
		return rf(data, expiry)
	}
	if rf, ok := ret.Get(0).(func(tokenprovider.TokenPayload, int) tokenprovider.Token); ok {
		r0 = rf(data, expiry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokenprovider.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(tokenprovider.TokenPayload, int) error); ok {
		r1 = rf(data, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretKey provides a mock function with given fields:
func (_m *Provider) SecretKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields: token
func (_m *Provider) Validate(token string) (tokenprovider.TokenPayload, error) {
	ret := _m.Called(token)

	var r0 tokenprovider.TokenPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (tokenprovider.TokenPayload, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) tokenprovider.TokenPayload); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tokenprovider.TokenPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
